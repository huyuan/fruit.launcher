/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.fruit.launcher;

import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.AbsListView;
import android.widget.BaseAdapter;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.TextView;

import com.fruit.launcher.LauncherSettings.Applications;

/**
 * Represents a set of icons chosen by the user or generated by the system.
 */
public class Folder extends LinearLayout implements DragSource, OnItemLongClickListener,
        OnItemClickListener, OnClickListener, View.OnLongClickListener {

    protected AbsListView mContent;
    protected DragController mDragController;

    protected Launcher mLauncher;

    protected TextView mTitleView;

    protected Button mCloseButton;

    protected FolderInfo mInfo;

    /**
     * Which item is being dragged
     */
    protected ItemInfo mDragItem;

    /**
     * Used to inflate the Workspace from XML.
     *
     * @param context The application's context.
     * @param attrs The attribtues set containing the Workspace's customization values.
     */
    public Folder(Context context, AttributeSet attrs) {
        super(context, attrs);
        setAlwaysDrawnWithCacheEnabled(false);
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();

        mContent = (AbsListView) findViewById(R.id.folder_content);
        if (mContent != null) {
	        mContent.setOnItemClickListener(this);
        }

        mCloseButton = (Button) findViewById(R.id.folder_close);
        if (mCloseButton != null) {
	        mCloseButton.setOnClickListener(this);
	        mCloseButton.setOnLongClickListener(this);
        }
    }

    @Override
	public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
    	if (mInfo instanceof UserFolderInfo) {
	        ShortcutInfo app = (ShortcutInfo) parent.getItemAtPosition(position);
	        int[] pos = new int[2];
	        v.getLocationOnScreen(pos);
	        app.intent.setSourceBounds(new Rect(pos[0], pos[1],
	                pos[0] + v.getWidth(), pos[1] + v.getHeight()));
	        mLauncher.startActivitySafely(app.intent, app);
    	} else if (mInfo instanceof ApplicationFolderInfo) {
    		ApplicationInfoEx app = (ApplicationInfoEx) parent.getItemAtPosition(position);
	        int[] pos = new int[2];
	        v.getLocationOnScreen(pos);
	        app.intent.setSourceBounds(new Rect(pos[0], pos[1],
	                pos[0] + v.getWidth(), pos[1] + v.getHeight()));
	        mLauncher.startActivitySafely(app.intent, app);
    	}
    	mLauncher.closeFolder(this);
    }

    @Override
	public void onClick(View v) {
        if (this instanceof UserFolder) {
        	switch (v.getId()) {
        	case R.id.folder_name_edit:
        	case R.id.folder_rename:
        		mLauncher.showRenameUserFolderDialog(mInfo);
        		break;
        	default:
        		break;
        	}
        }
        mLauncher.closeFolder(this);
    }

    @Override
	public boolean onLongClick(View v) {
        mLauncher.closeFolder(this);
        mLauncher.showRenameDialog(mInfo);
        return true;
    }

    @Override
	public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
        if (!view.isInTouchMode()) {
            return false;
        }

        ItemInfo app = (ItemInfo) parent.getItemAtPosition(position);

        if (this instanceof UserFolder) {
        	mDragController.addDropTarget(mLauncher.mDeleteZone);
        	if (mInfo.container == Applications.CONTAINER_APPS) {
        		if (mInfo instanceof ApplicationFolderInfo
        				&& ((ApplicationFolderInfo) mInfo).allAppsHomeBars != null) {
        			((ApplicationFolderInfo) mInfo).allAppsHomeBars.showHomeBar();
        			mDragController.addDropTarget(((ApplicationFolderInfo) mInfo).allAppsHomeBars);
        		}
        		mLauncher.closeFolderWithoutAnim(this);
        	} else {
        		mLauncher.closeFolder(this);
        	}
        	mDragController.startDrag(view, this, app, DragController.DRAG_ACTION_MOVE);
        } else {
        	mLauncher.closeFolder(this);
        	mDragController.startDrag(view, this, app, DragController.DRAG_ACTION_COPY);
        }
        mDragItem = app;

        return true;
    }

    @Override
	public void setDragController(DragController dragController) {
        mDragController = dragController;
    }

    @Override
	public void onDropCompleted(View target, boolean success) {
    	mDragController.removeDropTarget(mLauncher.mDeleteZone);
    	if (mInfo.container == Applications.CONTAINER_APPS) {
    		if (mInfo instanceof ApplicationFolderInfo
    				&& ((ApplicationFolderInfo) mInfo).allAppsHomeBars != null) {
    			AllAppsHomeBar allAppsHomeBars = ((ApplicationFolderInfo) mInfo).allAppsHomeBars;
    			allAppsHomeBars.hideHomeBar(true);
    			mDragController.removeDropTarget(allAppsHomeBars);
    		}
    	}
    }

    /**
     * Sets the adapter used to populate the content area. The adapter must only
     * contains ShortcutInfo items.
     *
     * @param adapter The list of applications to display in the folder.
     */
    void setContentAdapter(BaseAdapter adapter) {
    	if (mContent != null) {
    		mContent.setAdapter(adapter);
    	}
    }

    void notifyDataSetChanged() {
        ((BaseAdapter) mContent.getAdapter()).notifyDataSetChanged();
    }

    void setLauncher(Launcher launcher) {
        mLauncher = launcher;
    }

    /**
     * @return the FolderInfo object associated with this folder
     */
    FolderInfo getInfo() {
        return mInfo;
    }

    // When the folder opens, we need to refresh the GridView's selection by
    // forcing a layout
    void onOpen() {
        mContent.requestLayout();
    }

    void onClose() {
        final Workspace workspace = mLauncher.getWorkspace();
        workspace.getChildAt(workspace.getCurrentScreen()).requestFocus();
    }

    void bind(FolderInfo info) {
        mInfo = info;
        if (mTitleView != null) {
        	mTitleView.setText(info.title);
        }
        if (mCloseButton != null) {
            mCloseButton.setText(info.title);
        }
    }

	void switchScreenMode(boolean bIsFullScreen, int paddingTop) {
		// TODO Auto-generated method stub
		requestLayout();
	}
}